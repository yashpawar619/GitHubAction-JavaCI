name: Java CICD

on:
  push:
    branches: [ "master" ]  # Run workflow only on pushes to master branch
    
jobs:
  # -------------------- 1. Compile & Build --------------------
  compile: # Just naming convention can keep build, artifact, anything
    runs-on: self-hosted # Runs on our self-hosted runner VM

    steps:
    - uses: actions/checkout@v4   # Checkout source code
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml   # Compile & build JAR

  # -------------------- 2. Security Scans --------------------
  securitychk:
    runs-on: ubuntu-latest # Use GitHub-hosted runner
    needs: compile # Will run only after compile is successful

    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation # Install Trivy (vulnerability scanner)
      run: |
            sudo apt-get install wget gnupg
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
            echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update -y
            sudo apt-get install trivy -y
    - name: Trivy Scan
      run: trivy fs --format table -o fx-report.json .  # Scan repo for vulnerabilities

    - name: Gitleaks Installations
      run: sudo apt install gitleaks -y  # Install Gitleaks for secret detection
    - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json  # Scan for hardcoded secrets

  # -------------------- 3. Unit Tests --------------------
  Test: 
    runs-on: self-hosted
    needs: securitychk  # Runs only after security scan passes
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Unit Test Cases
      run: mvn test   # Run JUnit test cases

  # -------------------- 4. SonarQube Analysis --------------------
  build_SonarScan: 
    runs-on: self-hosted
    needs: Test  # Runs only after tests pass
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build Project
      run: mvn package   # Rebuild project for scanning
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar   # Upload JAR for later Docker build

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for better SonarQube analysis
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.3.1
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          
  # -------------------- 5. Docker Build & Push --------------------
  build_docker_image_push: 
    runs-on: self-hosted
    needs: build_SonarScan  # Runs after SonarQube analysis passes
    steps:
    - uses: actions/checkout@v4
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app   # Downloads JAR into ./app for Docker build

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3   # Enables cross-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3 # Advanced docker builder
    - name: Build and Push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: xyz/bankapp:latest  # Push image to Docker Hub use your dockerhub tag
        file: ./Dockerfile
